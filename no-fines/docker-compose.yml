services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
    ports:
      - "5434:5432" # Проброс порта PostgreSQL (локальный:контейнер)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    ports:
      - "${APP_HTTP_PORT}:${APP_HTTP_PORT}" # Проброс порта для HTTP
      - "${APP_GRPC_PORT}:${APP_GRPC_PORT}" # Проброс порта для gRPC
    environment:
      - APP_HTTP_PORT=${APP_HTTP_PORT}
      - APP_GRPC_PORT=${APP_GRPC_PORT}
      - POSTGRES_HOST=postgres # Имя сервиса в сети Docker
      - POSTGRES_PORT=5432
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}
      - POSTGRES_MIGRATION_PACKAGE=/root/migrations # Путь к файлам миграций
    depends_on:
      postgres:
        condition: service_healthy # Ждем, пока PostgreSQL станет доступен
    networks:
      - app-network
    entrypoint: ["/bin/sh", "-c", "./app migrate up && ./app serve"]

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge